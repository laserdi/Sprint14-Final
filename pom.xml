<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>ru.practicum</groupId>
    <artifactId>Sprint14-Final</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.apache.tomcat.embed</groupId>
            <artifactId>tomcat-embed-core</artifactId>
            <!--Слово “embed” в названии зависимости — это сокращение от англ. “embedded” — «встроенный».
            Контейнер будет встроен в наш проект — нам не нужно будет его запускать как отдельное приложение.
            Слово “core” можно перевести как «ядро» или «основа», это означает, что зависимость включает в себя
            только основные функции — нам их будет достаточно.-->
            <version>9.0.65</version>
            <!--Нам требуется версия 9.x — использует пакеты с базовыми классами сервлетов,
            начинающиеся на javax.servlet. Версия 10.x использует пакеты jakarta.servlet.
            Мы будем использовать javax.servlet и Tomcat 9.x, потому что Spring 5-й версии
            ещё не перешёл на использование новых пакетов и «не дружит» с Tomcat 10.-->
        </dependency>

        <!--Чтобы заменить TestServlet на более полезный DispacherServlet, нужно
        создать WebApplicationContext — без него сервлет-диспетчер не будет работать.
        Для создания контекста добавьте в pom.xml зависимость spring-webmvc.
        На самом деле хватило бы и spring-context, но мы сразу добавим webmvc,
        так как потом будем работать с контроллерами. spring-context добавится автоматически,
        как транзитивная зависимость spring-webmvc.-->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>5.3.23</version>
        </dependency>

        <!--Сначала добавьте зависимость lombok в pom.xml — это позволит сократить количество кода.-->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.24</version>
        </dependency>

        <!--Чтобы научить Spring превращать объекты в JSON, подключим библиотеку Jackson.
        Для этого добавьте нужную зависимость в pom.xml.-->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>2.13.4.2</version>
        </dependency>

        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.4.4</version>
        </dependency>
        <!--💡 Библиотеки регулярно обновляются, и какую бы версию мы ни указали в уроке, через некоторое
        время, неделю или месяц появится новая. Безопасно обновление версии происходит обычно в тех случаях,
        когда мажорная версия (первая цифра) не изменилась.
        Например, обновить Jackson с 2.13.3 на 2.14.1 с высокой гарантией безопасно.
        А вот если обновить с 2.13.3 на 3.1.2, можно сломать проект — в другой мажорной версии могут
        быть другие названия классов и методов.-->


    </dependencies>

</project>